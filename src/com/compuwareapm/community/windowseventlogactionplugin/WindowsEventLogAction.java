
 /**
  * This template file was generated by dynaTrace client.
  * The dynaTrace community portal can be found here: http://community.compuwareapm.com/
  * For information how to publish a plugin please visit http://community.compuwareapm.com/plugins/contribute/
  **/ 

package com.compuwareapm.community.windowseventlogactionplugin;

import com.dynatrace.diagnostics.pdk.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Collection;
import java.util.logging.Logger;


public class WindowsEventLogAction implements Action {
	private static final Logger log = Logger.getLogger(WindowsEventLogAction.class.getName());

	private Status.StatusCode writeWindowsEventLog(ActionEnvironment pActionEnvironment, Incident pIncident) {
		Status.StatusCode result = Status.StatusCode.Success;
		
		// Read Plugin Configuration Properties
		String propertySystem       = pActionEnvironment.getConfigString  ("com.compuwareapm.community.windowseventlogactionplugin.property.system");
		String propertyUser         = pActionEnvironment.getConfigString  ("com.compuwareapm.community.windowseventlogactionplugin.property.user");
		String propertyPassword     = pActionEnvironment.getConfigPassword("com.compuwareapm.community.windowseventlogactionplugin.property.password");
		String propertyEventLogName = pActionEnvironment.getConfigString  ("com.compuwareapm.community.windowseventlogactionplugin.property.eventlogname");
		String propertyEventLogType = pActionEnvironment.getConfigString  ("com.compuwareapm.community.windowseventlogactionplugin.property.eventlogtype");
		String propertySource       = pActionEnvironment.getConfigString  ("com.compuwareapm.community.windowseventlogactionplugin.property.source");
		Long propertyID             = pActionEnvironment.getConfigLong    ("com.compuwareapm.community.windowseventlogactionplugin.property.id");
		String propertyDescription  = pActionEnvironment.getConfigString  ("com.compuwareapm.community.windowseventlogactionplugin.property.description");
		
		// Write to Windows Event Log
		try {
			// Get Windows Runtime
			Runtime runtime = Runtime.getRuntime();
			
			// Create Windows Event Writer Process
			String command = System.getenv("WINDIR") + "\\system32\\" + "eventcreate.exe";
			
			// Property System
			if ((propertySystem != null) && (!propertySystem.trim().isEmpty())) {
				command = command + " /S " + replaceVariablesWithValues(pActionEnvironment, pIncident, propertySystem);
			}

			// Property User / Password
			if ((propertyUser != null) && (!propertyUser.trim().isEmpty()) && (propertyPassword != null) && (!propertyPassword.trim().isEmpty())) {
				command = command + " /U " + replaceVariablesWithValues(pActionEnvironment, pIncident, propertyUser);
				command = command + " /P " + replaceVariablesWithValues(pActionEnvironment, pIncident, propertyPassword);
			}
			
			// Property Logname
			if ((propertyEventLogName != null) && (!propertyEventLogName.trim().isEmpty())) {
				command = command + " /L " + replaceVariablesWithValues(pActionEnvironment, pIncident, propertyEventLogName);
			}
			
			// Property Logtype
			if ((propertyEventLogType != null) && (!propertyEventLogType.trim().isEmpty())) {
				command = command + " /T " + replaceVariablesWithValues(pActionEnvironment, pIncident, propertyEventLogType);
			}

			// Property Source
			if ((propertySource != null) && (!propertySource.trim().isEmpty())) {
				command = command + " /SO \"" + replaceVariablesWithValues(pActionEnvironment, pIncident, propertySource) + "\"";
			}

			// Property ID
			if (propertyID != null) {
				command = command + " /ID " + propertyID;
			}

			// Property Description
			if ((propertyDescription != null) && (!propertyDescription.trim().isEmpty())) {
				command = command + " /D \"";
				command = command + replaceVariablesWithValues(pActionEnvironment, pIncident, propertyDescription).replace("\n", Character.toString((char) 11)); // Windows Event Log Line Feed (Char 11)
				command = command + "\"";
			}
			
			// Execute Windows Event Writer Process ("eventcreate.exe")
			log.info("Executing Command: " + command);
			Process process = runtime.exec(command);

			// Read Process Console Standard Output
			BufferedReader inputreader = new BufferedReader(new InputStreamReader(process.getInputStream()));
			String processStandardOut = "";
			String inputline = null;
			while ((inputline = inputreader.readLine()) != null) {
				processStandardOut += processStandardOut.isEmpty() ? inputline : ("\n" + inputline);
			}

			// Read Process Console Error Output
			inputreader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
			String processErrorOut = "";
			inputline = null;
			while ((inputline = inputreader.readLine()) != null) {
				processErrorOut += processErrorOut.isEmpty() ? inputline : ("\n" + inputline);
			}
			
			// Parse Process Console Output

			int exitCode = process.waitFor();
			if (exitCode == 0) {
				log.info("ExitCode " + exitCode + ". StandardOut: " + processStandardOut + ". ErrorOut: " + processErrorOut);
			} else {
				log.severe("ExitCode " + exitCode + ". ErrorOut: " + processErrorOut + ". StandardOut: " + processStandardOut);
				result = Status.StatusCode.ErrorTargetServiceExecutionFailed;
			}
		} catch (Exception pException) {
			pException.printStackTrace();
			log.severe("Exception while writing Windows Log: " + pException);
			result= Status.StatusCode.ErrorInternalException;
		}

		return result;
	}
	
	private String replaceVariablesWithValues(ActionEnvironment pActionEnvironment, Incident pIncident, String pTextWithVariables) {
		String result = pTextWithVariables;
		
		// Create Values for Variables
		String SYSTEM_PROFILE                 = pActionEnvironment.getSystemProfileName();
		String INCIDENT_MESSAGE               = pIncident.getMessage();
		String INCIDENT_NAME                  = pIncident.getIncidentRule().getName();
		String INCIDENT_DESCRIPTION           = pIncident.getIncidentRule().getDescription();
		String INCIDENT_RECORDED_SESSION_ID   = pIncident.getRecordedSessionId();
		String INCIDENT_RECORDED_SESSION_NAME = pIncident.getRecordedSessionName();
		String INCIDENT_SERVER_NAME           = pIncident.getServerName();
		String INCIDENT_DURATION              = pIncident.getDuration().toString();
		String INCIDENT_END_TIME              = pIncident.getEndTime().toString();
		String INCIDENT_SEVERITY              = pIncident.getSeverity().toString();
		String INCIDENT_START_TIME            = pIncident.getStartTime().toString();
		String INCIDENT_VIOLATIONS            = "";
		for (Violation violation : pIncident.getViolations()) {
			String violationText = ("Measure " + violation.getViolatedMeasure().getName() + " violoated threshold. ");
			INCIDENT_VIOLATIONS = INCIDENT_VIOLATIONS + violationText;
		}
		
		// Replace Variable with Values
		result = result.replaceAll("%SYSTEM_PROFILE%",                 SYSTEM_PROFILE);
		result = result.replaceAll("%INCIDENT_MESSAGE%",               INCIDENT_MESSAGE);
		result = result.replaceAll("%INCIDENT_NAME%",                  INCIDENT_NAME);
		result = result.replaceAll("%INCIDENT_DESCRIPTION%",           INCIDENT_DESCRIPTION);
		result = result.replaceAll("%INCIDENT_RECORDED_SESSION_ID%",   INCIDENT_RECORDED_SESSION_ID);
		result = result.replaceAll("%INCIDENT_RECORDED_SESSION_NAME%", INCIDENT_RECORDED_SESSION_NAME);
		result = result.replaceAll("%INCIDENT_SERVER_NAME%",           INCIDENT_SERVER_NAME);
		result = result.replaceAll("%INCIDENT_DURATION%",              INCIDENT_DURATION);
		result = result.replaceAll("%INCIDENT_END_TIME%",              INCIDENT_END_TIME);
		result = result.replaceAll("%INCIDENT_SEVERITY%",              INCIDENT_SEVERITY);
		result = result.replaceAll("%INCIDENT_START_TIME%",            INCIDENT_START_TIME);
		result = result.replaceAll("%INCIDENT_VIOLATIONS%",            INCIDENT_VIOLATIONS);
		
		return result;
	}

	/**
	 * Initializes the Action Plugin. This method is always called before
	 * <tt>execute</tt>. If the returned status is <tt>null</tt> or the status
	 * code is a non-success code then <tt>execute</tt> will not be called.
	 * 
	 * @param env
	 *            the configured <tt>ActionEnvironment</tt> for this Plugin;
	 *            <b>does not contain any incidents</b>
	 * @see Plugin#teardown()
	 * @return a <tt>Status</tt> object that describes the result of the method
	 *         call
	 * @throws Exception
	 */
	@Override
	public Status setup(ActionEnvironment env) throws Exception {
		return new Status(Status.StatusCode.Success);
	}

	/**
	 * Executes the Action Plugin to process incidents.
	 * 
	 * <p>
	 * This method is called at the scheduled intervals, but only if incidents
	 * occurred in the meantime. If the Plugin execution takes longer than the
	 * schedule interval, subsequent calls to
	 * {@link #execute(ActionEnvironment)} will be skipped until this method
	 * returns. After the execution duration exceeds the schedule timeout,
	 * {@link TaskEnvironment#isStopped()} will return <tt>true</tt>. In this
	 * case execution should be stopped as soon as possible. If the Plugin
	 * ignores {@link TaskEnvironment#isStopped()} or fails to stop execution in
	 * a reasonable timeframe, the execution thread will be stopped ungracefully
	 * which might lead to resource leaks!
	 * 
	 * @param pActionEnvironment
	 *            a <tt>ActionEnvironment</tt> object that contains the Plugin
	 *            configuration and incidents
	 * @return a <tt>Status</tt> object that describes the result of the method
	 *         call
	 */
	@Override
	public Status execute(ActionEnvironment pActionEnvironment) throws Exception {
		Status.StatusCode resultStatusCode = Status.StatusCode.Success;

		// Loop incidents
		Collection<Incident> incidents = pActionEnvironment.getIncidents();
		for (Incident incident : incidents) {
			// Write Windows Event Log for Incident
			Status.StatusCode statusCode = writeWindowsEventLog(pActionEnvironment, incident);
			// Check Status
			if (statusCode != Status.StatusCode.Success) {
				resultStatusCode = statusCode;
			}
		}

		return new Status(resultStatusCode);
	}

	/**
	 * Shuts the Plugin down and frees resources. This method is called either
	 * way if the Action setup/execution has failed or was successful.
	 * 
	 * @see Action#setup(ActionEnvironment)
	 */
	@Override
	public void teardown(ActionEnvironment env) throws Exception {
	}

}
